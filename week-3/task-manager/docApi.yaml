openapi: 3.0.0
info:
  description: |
    This is a sample Task Manager server. You can create and delete users and their corresponding tasks.
    This API support image upload for the users and tasks and 
    works with authentication
  version: "1.0.0"
  title: Task Manager API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
  - description: Task-Manager API in Dev Environment
    url: 'http://localhost:3000'
  - url: 'http://localhost:3000'
tags: 
  - name: users
    description: Endpoints related with users
  - name: users-images
    description: Endpoints for upload user's profile image
  - name: tasks
    description: Endpoints related with tasks
  - name: tasks-images
    description: Endpoints for upload a task's image
    
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: The required fields in the User Schema must be in the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUser'
        description: Created user object
        required: true
      responses:
          '201':
            description: User created and stored in databse
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/respUser'
          '400':
            description: Bad request
      
  /users/login:
    post:
      tags:
        - users
      summary: Login a user when provide the correct credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'example@gmail.com'
                password:
                  type: string
                  format: password
                  example: 'RedExp567!'
              required:
                - email
                - password         
      responses:
          '200':
            description: Login successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/respUser'
          '400':
            description: Bad request
      
  /users/logout:
    post:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Logs out a user
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: JWT
          required: true
      responses:
        '200':
          description: Logged out
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      
components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
  schemas:
    newUser:
      type: object
      properties:
        name:
          type: string
          example: 'José Perez'
        password:
          type: string
          format: password
          example: 'RedExp567!'
        email:
          type: string
          format: email
          example: 'example@gmail.com'
        age:
          type: number
          example: 27
      required:
        - name
        - password
        - email
    respUser:
      type: object
      properties:
        user:
          type: object
          properties:   
            _id:
              type: string
              example: 'ihsSsdjhls31373873ddasd357'
            name:
              type: string
              example: 'José Perez'
            email:
              type: string
              format: email
              example: 'example@gmail.com'
            age:
              type: number
              example: 27
            createdAt:
              type: string
              format: date-time
              example: '2019-07-21T17:32:28Z'
            updatedAt:
              type: string
              format: date-time
              example: '2020-07-21T17:32:28Z'
          required:
            - _id
            - name
            - email
            - age
            - createdAt
            - updatedAt
        tokens: 
          type: array
          items: 
            type: object
            properties:
              token:
                type: string
                example: 'ihsSsdjhls31373873ddasd357.321354341fghdfhdfh.514sdgsdgsdf4g3sdfg543'
  responses:
    UnauthorizedError:
      description: Please authenticate
    

